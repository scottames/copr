# monitor copr builds on changes merged to main
name: copr build status
on:
  push:
    branches: [main]
    paths:
      - "*/*.spec"

jobs:
  matrix_from_changed_specs:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix_from_changed_spec_files.outputs.matrix }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Find changed spec files
        id: changed_specs
        run: |
          SPEC_FILES=$(git diff --name-only main...HEAD -- '*/*.spec')
          if [ -z "$SPEC_FILES" ]; then
            echo "::notice::No spec files changed in this commit"
            exit 0
          fi
          echo "::debug::Changed spec files: $SPEC_FILES"
          echo "changed_specs=${SPEC_FILES}" >> $GITHUB_OUTPUT

      - name: Create package matrix
        id: matrix_from_changed_spec_files
        run: |
          # Extract project/package from paths (structure: <project>/<package>.spec)
          MATRIX_JSON=$(echo "${{ steps.changed_specs.outputs.changed_specs }}" | \
            xargs -n1 sh -c 'echo "$0" | sed -E "s|([^/]+)/([^/]+)\.spec|{\"project\":\"\1\",\"package\":\"\2\"}|"')

          echo "::group::Generated build matrix"
          echo "$MATRIX_JSON"
          echo "::endgroup::"

          echo "matrix={\"include\":[${MATRIX_JSON//$'\n'/,}]}" >> $GITHUB_OUTPUT

  monitor-builds:
    needs: matrix_from_changed_specs
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.matrix_from_changed_specs.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Install copr-cli
        run: |
          echo "::group::Installing COPR CLI dependencies"
          python3 -m pip install copr-cli
          echo "::endgroup::"

      - name: Monitor COPR build status
        env:
          COPR_API_TOKEN: ${{ secrets.COPR_API_TOKEN }}
        run: |
          echo "::notice file=${{ matrix.project }}/${{ matrix.package }}.spec::Monitoring builds for ${{ matrix.project }}/${{ matrix.package }}"

          LATEST_BUILD_ID=$(copr-cli get-package ${{ matrix.project }} ${{ matrix.package }} | jq -r '.latest_build_id')
          echo "::debug::Build ID: $LATEST_BUILD_ID"

          for i in {1..30}; do
            STATUS=$(copr-cli get-build-status $LATEST_BUILD_ID | jq -r '.status')
            
            case $STATUS in
              "succeeded")
                echo "::notice file=${{ matrix.project }}/${{ matrix.package }}.spec,title=Build Success::Package ${{ matrix.package }} built successfully!"
                exit 0
                ;;
              "failed"|"canceled")
                echo "::error file=${{ matrix.project }}/${{ matrix.package }}.spec,title=Build Failure::Build failed for ${{ matrix.package }} (Status: $STATUS)"
                exit 1
                ;;
              *)
                echo "::debug::Current status: $STATUS - Polling again in 2 minutes..."
                sleep 120
                ;;
            esac
          done

          echo "::error file=${{ matrix.project }}/${{ matrix.package }}.spec,title=Build Timeout::Build monitoring timed out after 60 minutes"
          exit 1
